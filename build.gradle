// Works with Gradle 5.7 and Java 12

// To run this do:
// ./gradlew run

// To build a distribution zip:
// ./gradlew distZip

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.21.1'



}

sourceCompatibility = 11
targetCompatibility = 11

version = '0.0.1'
group = 'ehu.isad'

java {
    modularity.inferModulePath.set(true)
}

application {
    mainModule = 'oinarria' // name defined in module-info.java
    mainClass = 'ehu.isad.Main'
}



// ext.moduleName = 'gradlejavafxhelloworld'
mainClassName = "$moduleName/ehu.isad.Main"


javafx {
    version = "12"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web']
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.2'
    compile 'io.github.typhon0:AnimateFX:1.2.0'

}



jlink {

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'whatwebfx'

        jvmArgs = [
                "--add-opens", "javafx.graphics/javafx.css=de.jensd.fx.fontawesomefx.commons"
        ]
    }

    jpackage {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}


repositories {
    mavenCentral()

}

def newArgs = [ '--add-exports','java.desktop/com.apple.eawt=ALL-UNNAMED',
               '--add-opens', 'javafx.graphics/javafx.css=de.jensd.fx.fontawesomefx.commons',]

run {
    inputs.property('moduleName', moduleName)
    doFirst {
        jvmArgs = jvmArgs.plus(newArgs)
        jvmArgs = jvmArgs.plus(['--module-path', classpath.asPath,
                                '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir).asPath,
                                '--module', "$mainClassName",
        ])
        classpath = files()
    }
}



run {
    standardInput = System.in
}
